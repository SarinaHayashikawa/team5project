//=============================================================================
//
// リザルト処理 [result.cpp]
// Author:
//
//=============================================================================
//=============================================================================
// ヘッダファイルのインクルード
//=============================================================================
#include "result.h"
#include "winner player.h"
#include "manager.h"
#include "camera.h"
#include "winner.h"
#include "result effect.h"

//=============================================================================
// 静的メンバ変数初期化
//=============================================================================
CCamera* CResult::m_pCamera = nullptr;

//=============================================================================
// コンストラクタ
//=============================================================================
CResult::CResult()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CResult::~CResult()
{
}

//=============================================================================
// 生成処理
//=============================================================================
CResult * CResult::Create(void)
{
	CResult *pResult;
	pResult = new CResult;
	if (pResult != nullptr)
	{
		pResult->Init();
	}
	return pResult;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CResult::Init(void)
{
	//カメラ生成
	CManager::CreateCamera();
	//カメラ設定
	m_pCamera = CManager::GetCamera();
	//カメラ位置設定
	m_pCamera->SetPos(0, D3DXVECTOR3(0.0f, 0.0f, 0.0f));
	//ライト設定
	CManager::CreateLight();

	//勝者モデルの表示
	CWinnerPlayer::Create(D3DXVECTOR3(0.0f,0.0f,0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(1.0f, 1.0f, 1.0f),1);
	
	//勝利UI
	CWinner::Create(D3DXVECTOR3(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 4, 0.0f), D3DXVECTOR3(1000.0f, 350.0f, 0.0f));
	//スコア

	//皿を上から降らす
	CResultEffect::Create();


	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CResult::Uninit(void)
{
}

//=============================================================================
// 更新処理
//=============================================================================
void CResult::Update(void)
{
}

//=============================================================================
// 描画処理
//=============================================================================
void CResult::Draw(void)
{
}
